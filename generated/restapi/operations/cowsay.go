package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// CowsayHandlerFunc turns a function with the right signature into a cowsay handler
type CowsayHandlerFunc func(CowsayParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CowsayHandlerFunc) Handle(params CowsayParams) middleware.Responder {
	return fn(params)
}

// CowsayHandler interface for that can handle valid cowsay params
type CowsayHandler interface {
	Handle(CowsayParams) middleware.Responder
}

// NewCowsay creates a new http.Handler for the cowsay operation
func NewCowsay(ctx *middleware.Context, handler CowsayHandler) *Cowsay {
	return &Cowsay{Context: ctx, Handler: handler}
}

/*Cowsay swagger:route GET /cowsay cowsay

Respond to a Slack cowsay command

Respond to a Slack `/cowsay` command and send the requested message to the channel in which
the command was posted


*/
type Cowsay struct {
	Context *middleware.Context
	Params  CowsayParams
	Handler CowsayHandler
}

func (o *Cowsay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
