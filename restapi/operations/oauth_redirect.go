package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// OauthRedirectHandlerFunc turns a function with the right signature into a oauth redirect handler
type OauthRedirectHandlerFunc func(OauthRedirectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OauthRedirectHandlerFunc) Handle(params OauthRedirectParams) middleware.Responder {
	return fn(params)
}

// OauthRedirectHandler interface for that can handle valid oauth redirect params
type OauthRedirectHandler interface {
	Handle(OauthRedirectParams) middleware.Responder
}

// NewOauthRedirect creates a new http.Handler for the oauth redirect operation
func NewOauthRedirect(ctx *middleware.Context, handler OauthRedirectHandler) *OauthRedirect {
	return &OauthRedirect{Context: ctx, Handler: handler}
}

/*OauthRedirect swagger:route GET /oauth-redirect oauthRedirect

Respond to an oauth request acceptance/denial of app permissions

*/
type OauthRedirect struct {
	Context *middleware.Context
	Params  OauthRedirectParams
	Handler OauthRedirectHandler
}

func (o *OauthRedirect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
