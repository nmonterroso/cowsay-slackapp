package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewOauthRedirectParams creates a new OauthRedirectParams object
// with the default values initialized.
func NewOauthRedirectParams() OauthRedirectParams {
	return OauthRedirectParams{}
}

// OauthRedirectParams contains all the bound params for the oauth redirect operation
// typically these are obtained from a http.Request
//
// swagger:parameters oauthRedirect
type OauthRedirectParams struct {
	/*temporary code that can be exchanged for an access_token if the user accepted the oauth request
	  In: query
	*/
	Code *string
	/*error indicating that the user denied the access_token request
	  In: query
	*/
	Error *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *OauthRedirectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qCode, qhkCode, _ := qs.GetOK("code")
	if err := o.bindCode(qCode, qhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qError, qhkError, _ := qs.GetOK("error")
	if err := o.bindError(qError, qhkError, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OauthRedirectParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Code = &raw

	return nil
}

func (o *OauthRedirectParams) bindError(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Error = &raw

	return nil
}
